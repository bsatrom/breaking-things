<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BreakingThings</title>
    <description>BreakingThings.io is the personal and semi-professional blog of [Brandon Satrom](/author/brandon). 

An aspiring and self-described maker, Brandon typically writes about the topics capturing his interest and consuming too much of his time, from software &amp; micro-controllers, to CNC milling &amp; prototyping hardware. Pretty much anything and everything Brandon uncovers on his journey to break things in the process of creating something new.</description>
    <link>breakingthings.io/</link>
    <atom:link href="breakingthings.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 13 Sep 2016 09:05:14 -0500</pubDate>
    <lastBuildDate>Tue, 13 Sep 2016 09:05:14 -0500</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Smart Home, Dumb Home, Ignorant Home</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Stupidity has a certain charm. Ignorance does not. - Frank Zappa&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In an increasingly connected world, much of our attention seems to be drawn to the realm of “intelligence.” Not so much in humanity, but in the increasing intelligence of “things” around us. “Smart Homes,” “Smart Cities,” “Smart Cars,” “Smart Buildings,” and “Smart watches” are all terms that have seen increased usage over the last decade, and a sharp increase over the last few years. Our vision of the future is to make everything around us “smart,” ostensibly in an effort to make ourselves smarter.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://ssl.gstatic.com/trends_nrtr/680_RC25/embed_loader.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt; trends.embed.renderExploreWidget(&quot;TIMESERIES&quot;, {&quot;comparisonItem&quot;:[{&quot;keyword&quot;:&quot;smart city&quot;,&quot;geo&quot;:&quot;&quot;,&quot;time&quot;:&quot;today 5-y&quot;},{&quot;keyword&quot;:&quot;smart home&quot;,&quot;geo&quot;:&quot;&quot;,&quot;time&quot;:&quot;today 5-y&quot;},{&quot;keyword&quot;:&quot;smart car&quot;,&quot;geo&quot;:&quot;&quot;,&quot;time&quot;:&quot;today 5-y&quot;},{&quot;keyword&quot;:&quot;smart building&quot;,&quot;geo&quot;:&quot;&quot;,&quot;time&quot;:&quot;today 5-y&quot;}],&quot;category&quot;:0,&quot;property&quot;:&quot;&quot;}, {}); 
&lt;/script&gt;

&lt;p&gt;In the midst of all of this attention, there seems to be less critical thought about what imbues “intelligence” on these things in the first place. The idea that a “smart thing” is a normal thing with a set of sensors (and possibly actuators) that can tell you about the thing, read the environment around the thing, and potentially control the thing is generally accepted. The thing in question is invariably connected to a network, meaning that it can communicate with the outside world, and the outside world with it.&lt;/p&gt;

&lt;p&gt;Putting it another way, &lt;em&gt;sensing plus connectivity is “smart”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On the flip side, to be a “dumb thing” is to possess none of this ability to sense, communicate and control beyond the thing itself. A “dumb thing” is a closed system, useful only in analog and forever the scorn of its owners, who’d rather not get up and walk across the room to turn on the coffee pot.&lt;/p&gt;

&lt;p&gt;Putting it another way &lt;em&gt;the absence of connectivity, sensing or not, is “dumb”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And while this distinction between smart and dumb, connected and disconnected things works for broad journalistic narrative, it masks the non-binary reality of the so called “Internet of Things.” It also papers over the increasing unease people–especially non-technical consumers–feel about acquiring devices that provide an open door to the world around them.&lt;/p&gt;

&lt;p&gt;This is especially true in the realm of the “smart home,” where a never-ending litany of connected devices are finding their way into the homes of many, from lightbulbs to thermostats; coffee pots to refrigerators; garage door openers to sprinkler systems. According to the narrative, these things are inherently good for consumers because they are “smart.”&lt;/p&gt;

&lt;p&gt;But beneath this binary narrative, a more sinister truth lurks: many of these devices are something worse than dumb: they are ignorant. And ignorance is dangerous.&lt;/p&gt;

&lt;h2 id=&quot;the-ignorant-home-defined&quot;&gt;The “Ignorant Home,” Defined&lt;/h2&gt;

&lt;p&gt;The idea of “ignorant devices” and “ignorant homes” isn’t commonly used that I’ve seen, but should be part of the narrative around smart home technologies. By “ignorance,” I don’t mean that a device cannot sense or isn’t connected. Rather, an ignorant device is one that is:&lt;/p&gt;

&lt;p&gt;A) Unaware of the connected home around it and/or unable to communicate with that home;
B) Unable to function when its communication mechanisms fail;
C) Unable to defend itself against external attacks;&lt;/p&gt;

&lt;p&gt;If the device or devices in your home exhibit any of these qualities, it would be better for them to be just plain dumb. To be sure, the devices in these categories border on dangerous.&lt;/p&gt;

&lt;h3 id=&quot;the-unaware-device&quot;&gt;The Unaware Device&lt;/h3&gt;

&lt;p&gt;Imagine your home has a slew of the latest smart devices. You have a Nest thermostat, two Nest cameras, a Ring video doorbell, a smattering of Hue lightbulbs, an August door lock and some WeMo plugs in your kitchen so you can start the coffee maker and  auto-toast an English Muffin each morning. This is a fine setup, and one that many folks on the bleeding edge of smart homes have, until it comes time to actually do something with those devices.&lt;/p&gt;

&lt;p&gt;First and foremost, controlling the devices above—which are peddled by five different manufacturers—requires five different mobile apps, all of which have their own User Experience, their own workflows and their own ways of orchestrating devices. Some of these apps, like the Hue app, are so convoluted in how they manage scenes that the simple act of adding another device from the same manufacturer to an existing scene or workflow is painful. Try adding new Hue bulbs to an existing scene if you want to feel the pain yourself.&lt;/p&gt;

&lt;p&gt;And if you want to create scenes that tie multiple devices together? Maybe you want to say “Goodnight, sweet home” and have your living room lights turned off, the front door dead-bolted and the entryway Nest cam activated? Good luck. If you’ve managed to grab devices for which the manufactures have entered into some kind of partnership agreement, you might discover a light integration, but you’re unlikely to find this among all your devices. What’s more, even where integrations do exist, you’re stuck awkwardly using them via another manufacturer’s app.&lt;/p&gt;

&lt;p&gt;The devices that fall into this category are ignorant because they are unaware that they are not alone in the smart home. They have no concept of other devices and other applications, only that they themselves exist, they are connected and that they perform some kind of function. It’s digital solipsism at its best.&lt;/p&gt;

&lt;p&gt;Even worse, many of these devices are often ignorant that they are &lt;em&gt;in&lt;/em&gt; a home to begin with. While these devices are on your local subnet, they communicate almost exclusively with a public cloud maintained by their manufacturer. Most of these devices provide no way to interface with them on the local network; it’s cloud or bust. Even when you’re controlling the device from your phone, you’re doing so through the public cloud and not your local network. And if you’re controlling a lightbulb in your home, but you have to go through the cloud to do it, is the bulb really on your network, or is your home just an extension of the public cloud?&lt;/p&gt;

&lt;h3 id=&quot;the-non-functional-device&quot;&gt;The Non-Functional Device&lt;/h3&gt;

&lt;p&gt;The second type of ignorance stems from the role that the cloud plays in the lives of many of these devices. Many connected devices have a cloud component to them, from door locks to thermostats and beyond. Benefits of this connection include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The vendor can make it easier for you to get the device running in your home without having a central smart home controller;&lt;/li&gt;
  &lt;li&gt;The vendor can push updates to the device with little to no intervention from the consumer;&lt;/li&gt;
  &lt;li&gt;The consumer can control the device when they are away from home.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are all great benefits that have allowed smart home devices to proliferate faster than related technologies of the past (like X10), but they also come with a few serious, related drawbacks to being cloud connected:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you can reach into your home and control the device from the cloud, in theory, anyone else can, too.&lt;/li&gt;
  &lt;li&gt;If the device is cloud-dependent, it may stop functioning when your home network or the vendor’s cloud goes down.&lt;/li&gt;
  &lt;li&gt;The vendor can reach into your home and render the device non-functional.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll touch on the first drawback in the next section, but for now let’s cover the last two.&lt;/p&gt;

&lt;p&gt;Cloud connectedness is a virtue, cloud dependency a vice. The benefits of a cloud connection quickly turn sour when a device actually must have a cloud connection to function or when that connection can easily render the device useless. Consider the &lt;a href=&quot;http://ring.com&quot;&gt;Ring&lt;/a&gt; doorbell. I have one of these devices next to my front door, as well as a Ring Chime in my entryway. The purpose of the chime is to replicate the function of an old-school doorbell chime, which goes off inside the house when the outside button is pushed.&lt;/p&gt;

&lt;p&gt;It’s a great concept, in theory, except for the fact that the Ring Doorbell and the Ring Chime in my home don’t communicate directly with each other, rather through Ring’s central, managed cloud. If my home network drops or the cloud goes down, not only do I &lt;em&gt;not&lt;/em&gt; get notifications on my phone, but the Chime is completely non-functional.&lt;/p&gt;

&lt;p&gt;The example of the Ring doorbell illustrates the issue with cloud dependency, but the use case is little more than an minor annoyance. This case, when applied to other, more critical smart home devices, however, can lead to more severe consequences.&lt;/p&gt;

&lt;p&gt;Take the Nest Thermostat, for instance, a device considered to be a vanguard of the smart home era. The Nest is a clever, beautiful little device, but is also very cloud dependent. In just January of 2016, Nest &lt;a href=&quot;https://thestack.com/iot/2016/01/14/nest-thermostat-bug-leaves-owners-without-heating/&quot;&gt;pushed an update&lt;/a&gt; to its thermostats that included a bug which rendered the devices (and home thermostats) completely non-functional. In January. In a large part of the midwest United States.&lt;/p&gt;

&lt;p&gt;Think about it, because of the central role of the cloud in the life of this devices, thousands of people were left without heat in the dead of Winter. It’s one thing to miss the FedEx driver when he drops off a package. Quite another to not be able to control your perfectly functional furnace when it’s ten below outside.&lt;/p&gt;

&lt;p&gt;Another, more seditious reality lies in the second point, and frankly is a subject for further explanation in a full post, but I’ll touch on it here. That is the cloud allowing the device vendor to render your device non-functional. One recent example of this occurred earlier this year with the Revolv smart home hub. Revolv was acquired by Nest in 2014 and was considered to be a very capable smart home controller, a device which is meant to solve the problem of disconnected, ignorant devices by installing a piece of hardware that unifies those devices and centrally manages your home.&lt;/p&gt;

&lt;p&gt;Revolv was a solid device in the space and while not wildly successful, it did show promise. That is, until &lt;a href=&quot;https://thestack.com/iot/2016/01/14/nest-thermostat-bug-leaves-owners-without-heating/&quot;&gt;Google shut it down unceremoniously&lt;/a&gt; in March of this year. What was even more notable, however, was not that Google shut down the service. These things happen all the time, especially at Google. The notable tidbit here is that, in the process of shutting down the Revolv, they rendered each and every purchased Revolv device totally and 100% non-functional. They couldn’t even be used to turn on a light bulb once Google shut things down. The same cloud dependency that allowed the Revolv scale and easily manage homes was used to reach into the homes of each and every owner and render their homes instantly dumber.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Holy fucking shit. &lt;a href=&quot;https://twitter.com/nest&quot;&gt;@nest&lt;/a&gt; smoke alarm malfunctions in the middle of the night, can&amp;#39;t be silenced. No reason. Now no smoke alarm.&lt;/p&gt;&amp;mdash; Ken MacInnis (@kcm) &lt;a href=&quot;https://twitter.com/kcm/status/765449955389517824&quot;&gt;August 16, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The cloud is a great boon to the smart home, but it comes with tradeoffs (and risks, which we’ll discuss next). To really step out of the realm of ignorance into enlightenment, smart device vendors &lt;em&gt;must&lt;/em&gt; ensure that being “cloud connected” doesn’t turn into “cloud dependent.”&lt;/p&gt;

&lt;h3 id=&quot;the-defenseless-device&quot;&gt;The Defenseless Device&lt;/h3&gt;

&lt;p&gt;While being unaware and cloud-dependence range from the annoying to the downright frustrating, there is another aspect to ignorance that is altogether more dangerous. That is, when devices that can make your home less safe, and even be used against you.&lt;/p&gt;

&lt;p&gt;This is somewhat an extension of the last type of device, but, in this case, is about devices that—through their cloud connection—can be taken over by malicious 3rd parties for a seditious purpose. By even allowing these devices into your home, you’re creating an attack vector that can literally provide malicious actors with the keys to your home.&lt;/p&gt;

&lt;p&gt;One notable example of this type of exploit was &lt;a href=&quot;http://mashable.com/2016/05/02/smartthings-hack/#cL.Ys9SDDPqQ&quot;&gt;unveiled earlier this year&lt;/a&gt; by security researchers at the University of Michigan. Using the popular &lt;a href=&quot;https://www.smartthings.com/&quot;&gt;Samsung SmartThings&lt;/a&gt; system—another smart home controller designed to coordinate your home’s various devices—these individuals were able to install an app in the SmartThings marketplace that logged pin code changes for smart door locks and sent those codes via SMS to the attacker. With these codes, an attacker can install his or her own secret codes and waltz right into your home, anytime. This is possible because SmartThings has an exploit that allow over-privileged apps—that is, apps that claim they are doing something simple, like checking the battery status on a device, but which do more than the end-user allows for—to be installed from the SmartThings marketplace. Unlike the heavily curated marketplaces that exist for mobile devices today, many of the home automation marketplaces are so nascent and unproven as to be markedly unsafe.&lt;/p&gt;

&lt;p&gt;Another example &lt;a href=&quot;http://motherboard.vice.com/read/internet-of-things-ransomware-smart-thermostat&quot;&gt;popped up&lt;/a&gt; in August of this year, and is just as frightening. In this case, security researchers were able to take control of a connected thermostat (they didn’t say which brand) and install a piece of ransomware on the device. For those not familiar with the term, ransomware is the term for a piece of malicious software that essentially “locks up” your device until you pay the attacker to remove the lock. Historically, this has been used to render personal computers unusable. In this case, researchers were able to run an exploit on a connected thermostat in a similar fashion, displaying a “pay or else” message and then rendering the thermostat inoperable.&lt;/p&gt;

&lt;p&gt;This is serious and should sound frightening. Imagine someone taking over your thermostat and setting the temperature to 99 degrees in August and insisting you pay money to be able to cool your own home again.&lt;/p&gt;

&lt;p&gt;The fact is, the “smart home” space is still young, and while “home automation” has been around for a while, it’s never had this volume of interest, and has never been so connected to the outside world. Vendors in this space are still figuring out how to secure their devices, and thus, your home, but they are doing so as they rush to take part in the in-progress smart home land grab. This is all well and good, but safety and security are not areas for extensive field testing. It is our responsibility as consumers to not only pay critical attention to the security features of our devices, but to push the vendors we buy from to make security a priority, not a nice to have feature.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-the-ignorant-home&quot;&gt;Avoiding the Ignorant Home&lt;/h2&gt;

&lt;p&gt;At this point, you’re probably reading this and thinking &lt;em&gt;why would I ever buy even a connected lightbulb again?&lt;/em&gt; But in spite of the critical nature of this post, I am actually quite bullish on the smart home. My concern stems from the fact that we’re sitting at a critical inflection point where smart home technologies will &lt;em&gt;never&lt;/em&gt; reach mass adoption if the purveyors of those devices don’t get their collective acts together and purge ignorance from their ecosystems.&lt;/p&gt;

&lt;p&gt;As consumers and end-users of these devices, the best way that we can ensure that device vendors focus their attention on creating safe and secure devices is to push them to do so via our buying behavior. Avoid devices that have a history of known-issues, as well as devices that require a cloud connection to function. If you don’t know, do some research, and ask online, especially if you’re shopping via Amazon, where questions can be a powerful influencer for others considering a device. The bottom line is this: only you have the safety of your home in mind, so be aggressive and look for devices that co-exist well on your network, that integrate with others and that are inherently well-protected.&lt;/p&gt;

&lt;p&gt;Beyond the practical things you and I can do to keep our homes safe and smart, device vendors can move themselves towards building more safe and secure (and intelligent) ecosystems by taking a few lessons from nature.&lt;/p&gt;

&lt;h2 id=&quot;the-smart-home-and-natural-intelligence&quot;&gt;The Smart Home and &lt;em&gt;Natural&lt;/em&gt; Intelligence&lt;/h2&gt;

&lt;p&gt;In the real world, that is the dumb, disconnected natural world around us, “intelligence” means survival, and the vast majority of creatures, including humans, have learned to survive through &lt;em&gt;community&lt;/em&gt; and &lt;em&gt;security.&lt;/em&gt; Creatures unaware of external threats, or unable to defend themselves, quickly die out, as do those that live “apart from the pack” and attempt to survive alone.&lt;/p&gt;

&lt;p&gt;As the number of connected devices in our homes and around us proliferates–growing into the trillions in the coming years–we’d be wise to view these devices as part of an electronic ecology, instead of merely bits of connected silicon in our environment. With this as our guidance, we should expect that &lt;em&gt;communal&lt;/em&gt;, &lt;em&gt;adaptable&lt;/em&gt; and &lt;em&gt;secure&lt;/em&gt; devices would rise to the top and stand as the best devices for our homes. I’ll share more about what I think this means in next post in this series.&lt;/p&gt;

&lt;p&gt;As we build our own ecologies and ecosystems in our homes, buildings and cities, we’d be wise to apply the same principles: For devices to be truly intelligent–and for our homes to inherit the same qualities–they must be communal, they must be able to adapt and they must be secure. Anything else isn’t just dumb, it’s dangerous.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Sep 2016 10:35:00 -0500</pubDate>
        <link>breakingthings.io/posts/ignorance</link>
        <guid isPermaLink="true">breakingthings.io/posts/ignorance</guid>
        
        <category>connected home</category>
        
        <category>IoT</category>
        
        <category>home automation</category>
        
        <category>automated ignorance</category>
        
        <category>terminology</category>
        
        
        <category>smart-home</category>
        
      </item>
    
      <item>
        <title>Building Your Own Smart Home Controller - Part 2, The Gateway</title>
        <description>&lt;p&gt;Several months ago, I decided to build my own smart home controller. In &lt;a href=&quot;http://breakingthings.io/posts/smart-home-controller-part1&quot;&gt;Part 1&lt;/a&gt; of this series, I detailed the process for setting up the Smart Home Respository.
In this post, I’ll cover setting up the Gateway.&lt;/p&gt;

&lt;p&gt;This post does duplicate much of the instructions I’ve provided in the &lt;a href=&quot;https://github.com/rosie-home/rosie-gateway&quot;&gt;Rosie-Gateway repo&lt;/a&gt;, though I wil provide a bit more context and explanation for those of you who like a bit more prose with your software setup instructions.&lt;/p&gt;

&lt;p&gt;This is a longer, but skimmable post. I’ve even included a handy TOC for the jump-arounders among you:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#rosie-architecture&quot;&gt;Rosie Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#role-of-the-gateway&quot;&gt;Role of the Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-node-red&quot;&gt;Installing Node RED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-mosquitto&quot;&gt;Installing Mosquitto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-telegraf&quot;&gt;Installing Telegraf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#auto-starting-services&quot;&gt;Auto-Starting Services&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rosie-architecture&quot;&gt;Rosie Architecture&lt;/h2&gt;

&lt;p&gt;The Rosie system, as I’m calling it now, consists of two major pieces of hardware in your home:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A Gateway, which facilitates all messages from and communication between connected devices&lt;/li&gt;
  &lt;li&gt;A Repository, which handles data storage, events and vizualizations&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;role-of-the-gateway&quot;&gt;Role of the Gateway&lt;/h2&gt;

&lt;p&gt;The Gateway is the brain of the home and its central to its function. As much as possible in my home, I want to minimize direct chatter between devices (and chatter to the cloud, but this is not always possible with 3rd party smart devices) and ensure that the gateway orchestrates everything in my home.&lt;/p&gt;

&lt;p&gt;On the hardware side, the choice of hardware is largely up to you, though I recommend a device that supports a variety of communication protocols to ensure that you can support a broad number of devices. Alternatively, you can grab a Pi 2 or Pi 3 and add hats or your own add-ons to expand support, but for my initial prototypes I decided to use the &lt;a href=&quot;http://artik.io&quot;&gt;Samsung Artik 5&lt;/a&gt; which supports WiFi, BLE, ZigBee, ZWave, Thread and SigFox.&lt;/p&gt;

&lt;p&gt;On the software side, the Rosie Gateway relies on three software packages to do its work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodered.org/&quot;&gt;Node-RED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mosquitto.org/&quot;&gt;Mosquitto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://influxdata.com/time-series-platform/telegraf/&quot;&gt;Telegraf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the packages below were installed on a Samsung Artik 5, which runs Fedora 22. If you’re using a Raspberry Pi, the instructions will be similar, but you’ll use &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt; for installing packages as opposed to &lt;code class=&quot;highlighter-rouge&quot;&gt;dnf&lt;/code&gt;. If you’re using another board or computer, modify the instructions below to fit your OS’s package manager.&lt;/p&gt;

&lt;h2 id=&quot;installing-node-red&quot;&gt;Installing Node RED&lt;/h2&gt;

&lt;p&gt;At the moment, Rosie relies on Node RED as the development tool and engine for workflows around my smart home. This tool, which was incubated in the IBM Emerging Tech group, is a great way to construct and visualize interactions with and messages between devices. There’s a lot of out of the box functionality, and a ton of plugins (distrubted via npm) and sample flows contributed by the community.&lt;/p&gt;

&lt;p&gt;I have my gripes with Node RED, and I expect we’ll either fork it or replace it with something else moving forward, but its been a great tool for getting started with our smart home MVP.&lt;/p&gt;

&lt;p&gt;Also, getting it up and running is simple…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Update your package manager (dnf in the case of Fedora) to ensure you have the last package list&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dnf update
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You might find some instructions online that tell you to use &lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt; on Fedora. &lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt; has been deprecated, so while still works on Fedora 22, it redirects to &lt;code class=&quot;highlighter-rouge&quot;&gt;dnf&lt;/code&gt; automatically.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install node &amp;amp; npm&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dnf install node
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dnf install npm
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install node-red&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -g node-red
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start node-red (as a background process) and make sure everything runs fine&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;node-red &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If everything works, your terminal should display a message with the ip address and port (&lt;code class=&quot;highlighter-rouge&quot;&gt;1833&lt;/code&gt; is the default) Node RED is running on. Open a browser window and behold the new brain of your smart home.&lt;/p&gt;

&lt;h2 id=&quot;instaling-mosquitto&quot;&gt;Instaling Mosquitto&lt;/h2&gt;

&lt;p&gt;Mosquitto is an open source utility that facilitates publishing and subscribing to MQTT messages. MQTT messages are common in IoT environments because the payload is small and the pub-sub API is easy to configure. Node RED supports MQTT out of the box, and I’ll be using it for all of the custom sensors in my house.&lt;/p&gt;

&lt;p&gt;Assuming you’ve already installed node-red as listed above, installing mosquitto is simple&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dnf install mosquitto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, run mosquitto as a background process to make sure that things are ok.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mosquitto &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If everything works, you should get an ip address and port for the MQTT server running on your gateway. To test it out, you can set up a subscription and send a sample message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mosquito_sub –d –t msq_test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, open up a separate tab in the same directory and send a message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mosquito_pub –d –t mqtt_test –m “Hello Rosie&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If everything works, you should see a “Hello Rosie” message in the terminal window where you subscbived to messages.&lt;/p&gt;

&lt;h2 id=&quot;installing-telegraf&quot;&gt;Installing Telegraf&lt;/h2&gt;

&lt;p&gt;The final piece of software I’m running on my gateway is an optional one, but important nevertheless. It’s a tool called Telegraf from the folks at InfluxData. Telegraf is a utility that can automatically capture and stream messages into InfluxDB (and other systems), which I’m as the data storage system on my Repository.&lt;/p&gt;

&lt;p&gt;I’m running Telegraf on both my Gateway and Repository to collect server metrics (disk, diskio, memory, etc) about each system and stream them into InfluxDB. This allows me to monitor the brain of my smart home, and even include it in Node RED based workflows for managing my setup.&lt;/p&gt;

&lt;p&gt;As an ARM-based system, the installation process for Telegraf on the Artik is a bit different than other Fedora-based (RedHat or CentOS) devices.&lt;/p&gt;

&lt;p&gt;To collect server stats from the gateway, you’ll need to install telegraf.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
wget https://dl.influxdata.com/telegraf/releases/telegraf-0.13.1-1_linux_armhf.tar.gz
tar xvfz telegraf-0.13.1-1_linux_armhf.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;telegraf-0.13.1-1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you’ve installed Telegraf, you’ll need to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;telegraf.conf&lt;/code&gt; file to log to the remote InfluxDB instance on your Repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you’ve not yet completed the &lt;a href=&quot;https://github.com/rosie-home/rosie-repository/blob/master/docs/softwaresetup.md&quot;&gt;Repository setup steps&lt;/a&gt; do that first and then return to complete configuring Telegraf on your gateway.&lt;/p&gt;

&lt;p&gt;Open the &lt;code class=&quot;highlighter-rouge&quot;&gt;telegraf.conf&lt;/code&gt; file for editing&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi etc/telegraf/telegraf.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On line 60 (&lt;code class=&quot;highlighter-rouge&quot;&gt;:60&lt;/code&gt;), set the &lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt; to your gateway named&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hostname &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Rosie-Gateway&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On line 74 (&lt;code class=&quot;highlighter-rouge&quot;&gt;:74&lt;/code&gt;), set the &lt;code class=&quot;highlighter-rouge&quot;&gt;urls&lt;/code&gt; value to the IP address of your repository server&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;urls &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://10.171.5.129:8086&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On line 76 (&lt;code class=&quot;highlighter-rouge&quot;&gt;:76&lt;/code&gt;), set the database value to the same database you’re using for repository statistics (default is &lt;code class=&quot;highlighter-rouge&quot;&gt;telegraf&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;database &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;telegraf&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On line 82 (&lt;code class=&quot;highlighter-rouge&quot;&gt;:82&lt;/code&gt;), set the &lt;code class=&quot;highlighter-rouge&quot;&gt;retention_policy&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Every InfluxDB database has one or more rentention policies that dictate how long data is stored before deletion. On my repository, I have a few policies, one that keeps data for two days and one for two weeks. Since I only want server data for heartbeat purposes, and it logs frequently, I’ll use a shorter policy.&lt;/p&gt;

&lt;p&gt;For more information on creating retention policies in InfluxDB &lt;a href=&quot;https://docs.influxdata.com/influxdb/v0.13/query_language/database_management/#retention-policy-management&quot;&gt;see this article&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## Retention policy to write to.&lt;/span&gt;
retention_policy &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;two_days_only&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On lines 89 and 90, set the user name, set the username and password for your InfluxDB instance&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;username = &quot;admin&quot;
password = &quot;admin&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;ESC&lt;/code&gt; key and type &lt;code class=&quot;highlighter-rouge&quot;&gt;wq!&lt;/code&gt; to save your changes.&lt;/p&gt;

&lt;p&gt;To ensure that everything is working, run telegraf with the recently edited config file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/telegraf-0.13.1-1/usr/bin/telegraf -config ~/telegraf-0.13.1-1/etc/telegraf/telegraf.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;auto-starting-services&quot;&gt;Auto-starting services&lt;/h2&gt;

&lt;p&gt;Once you’ve installed node-red, mosquitto and Telegraf on your Gateway, you’ll want to configure them to auto-run when you hub starts up.&lt;/p&gt;

&lt;h4 id=&quot;auto-starting-node-red&quot;&gt;Auto-starting node-red&lt;/h4&gt;

&lt;p&gt;First, create a new file named &lt;code class=&quot;highlighter-rouge&quot;&gt;nodered&lt;/code&gt; at /etc/init.d/ and change permissions on the file to enable execution&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir /etc/init.d/nodered
$ chmod 755 /etc/init.d/nodered
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Download &lt;a href=&quot;https://gist.github.com/bigmonkeyboy/9962293&quot;&gt;this init.d script&lt;/a&gt; for node-red and copy it into the file you created in the last step. Alternatively, you can copy the code below. If you download the file linked, be sure to 
change the first uncommented line from &lt;code class=&quot;highlighter-rouge&quot;&gt;USER=pi&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;USER=root&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Starts and stops Node-RED&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /etc/init.d/nodered&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### BEGIN INIT INFO&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Provides:     node-red&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Required-Start:       $syslog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Required-Stop:        $syslog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Default-Start:        2 3 4 5&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Default-Stop:         0 1 6&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Short-Description:    Node-RED initialisation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### END INIT INFO&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Can be downloaded and installed in one go by using this command&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sudo wget -O /tmp/download https://gist.github.com/bigmonkeyboy/9962293/download &amp;amp;&amp;amp; sudo tar -zxf /tmp/download --strip-components 1 -C /etc/init.d &amp;amp;&amp;amp; sudo chmod 755 /etc/init.d/nodered &amp;amp;&amp;amp; sudo update-rc.d nodered defaults&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This runs as the user called pi - please change as you require&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root

&lt;span class=&quot;c&quot;&gt;# The log is written to here - please make sure your user has write permissions.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/log/node-red.log

&lt;span class=&quot;c&quot;&gt;#Load up node red when called&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in

&lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;pgrep ^node-red&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&amp;gt; /dev/null
    &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Node-RED already running.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting Node-Red..&quot;&lt;/span&gt;
        touch &lt;span class=&quot;nv&quot;&gt;$LOG&lt;/span&gt;
        chown &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOG&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$LOG&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Node-RED service start: &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$LOG&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        su -l $USER -c &quot;cd ~/.node-red &amp;amp;&amp;amp; screen -dmS red node-red-pi --max-old-space-size=128&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;
        su -l &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; -c &lt;span class=&quot;s2&quot;&gt;&quot;node-red-pi --max-old-space-size=128 -u ~/.node-red &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Logging to &quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOG&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Stopping Node-Red..&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#        su -l $USER -c &quot;screen -S red -X quit&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;
    pkill -SIGINT ^node-red&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
    sleep 2
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$LOG&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Node-RED service stop: &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;date&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$LOG&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

restart&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Restarting Node-Red..&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; stop
        sleep 2
        &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt; start
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Restarted.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {start|stop|restart}&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;chkconfig&lt;/code&gt; to modify runlevel settings on the nodered service&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ chkconfig --add nodered
$ chkconfig --level 2345 nodeted on
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Start the service to make sure everything worked&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/rc.d/init.d/nodered start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;auto-starting-mosquitto&quot;&gt;Auto-starting mosquitto&lt;/h4&gt;

&lt;p&gt;Create a conf file basd on the preinstalled example file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv /etc/mosquitto/mosquitto.conf.example /etc/mosquitto/mosquitto.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use the systemd utility to enable and start the service&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl enable mosquitto.service
systemctl start mosquitto.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;auto-starting-telegraf&quot;&gt;Auto-starting Telegraf&lt;/h4&gt;

&lt;p&gt;Create a service file in the Systemd folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch /usr/lib/systemd/system/telegraf.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the file already exists, skip to the next step.&lt;/p&gt;

&lt;p&gt;Open the file for editing and paste the following&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=The plugin-driven server agent for reporting metrics into InfluxDB
Documentation=https://github.com/influxdata/telegraf
After=network.target

[Service]
EnvironmentFile=-/etc/default/telegraf
User=root
Environment=&#39;STDOUT=/var/log/telegraf/telegraf.log&#39;
Environment=&#39;STDERR=/var/log/telegraf/telegraf.log&#39;
ExecStart=/bin/sh -c &quot;exec ~/telegraf-0.13.1-1/usr/bin/telegraf -config ~/telegraf-0.13.1-1/etc/telegraf/telegraf.conf ${TELEGRAF_OPTS} &amp;gt;&amp;gt;${STDOUT} 2&amp;gt;&amp;gt;${STDERR}&quot;
ExecReload=/bin/kill -HUP $MAINPID
Restart=on-failure
KillMode=control-group

[Install]
WantedBy=multi-user.target
Alias=telegraf.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, reload the systemd daemon and start the service&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl enable telegraf
systemctl start telegraf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s that! You now have a smart home gateway, ready to facilitate all of your futuristic interactions!&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Aug 2016 13:35:00 -0500</pubDate>
        <link>breakingthings.io/posts/smart-home-controller-part2</link>
        <guid isPermaLink="true">breakingthings.io/posts/smart-home-controller-part2</guid>
        
        <category>smart-home</category>
        
        <category>home-controller</category>
        
        <category>BYO</category>
        
        <category>particle</category>
        
        <category>software</category>
        
        <category>hardware</category>
        
        <category>samsung-artik</category>
        
        
        <category>smart-home</category>
        
      </item>
    
      <item>
        <title>Building Your Own Smart Home Controller - Part 1, The Repository</title>
        <description>&lt;p&gt;Several months ago, I decided to build my own smart home controller. My reasons are many, and I’ll detail a few in a future post or two, but suffice to say that I wanted complete control over the devices in my home, and do not want to bring in an appliance rife with DRM that may one day turn into an expensive, dead plastic box.&lt;/p&gt;

&lt;p&gt;I’m at the beginning of my journey, but my aspiration is to build something that others can also use and build upon, which is why I and a few others started the &lt;a href=&quot;https://github.com/rosie-home&quot;&gt;Rosie project&lt;/a&gt; on GitHub. More on Rosie in a future post as well.&lt;/p&gt;

&lt;p&gt;Over the last few months, I’ve spent many, many, many hours getting my gateway and repository set-up with the right software and some basic flows. My hope is that these instructions save you some time if you decide to undertake this for yourself.&lt;/p&gt;

&lt;p&gt;This post does duplicate much of the instructions I’ve provided in the &lt;a href=&quot;https://github.com/rosie-home/rosie-repository&quot;&gt;Rosie-Repository repo&lt;/a&gt;, though I wil provide a bit more context and explanation for those of you who like a bit more prose with your software setup instructions.&lt;/p&gt;

&lt;p&gt;This is a longer, but skimmable post. I’ve even included a handy TOC for the jump-arounders among you:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#rosie-architecture&quot;&gt;Rosie Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#role-of-the-repository&quot;&gt;Role of the Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-influxdb&quot;&gt;Installing InfluxDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-telegraf&quot;&gt;Installing Telegraf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-grafana&quot;&gt;Installing Grafana&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#auto-starting-services&quot;&gt;Auto-Starting Services&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rosie-architecture&quot;&gt;Rosie Architecture&lt;/h2&gt;

&lt;p&gt;The Rosie system, as I’m calling it now, consists of two major pieces of hardware in your home:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A Gateway, which facilitates all messages from and communication between connected devices&lt;/li&gt;
  &lt;li&gt;A Repository, which handles data storage, events and vizualizations&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;role-of-the-repository&quot;&gt;Role of the Repository&lt;/h2&gt;

&lt;p&gt;The Repository is, as it sounds, the storage system for Rosie. It hosts the system databse, manages events and notifications, and provides dashboards of home data.&lt;/p&gt;

&lt;p&gt;On the hardware side, the choice of hardware is largely up to you, though I recommend using a Raspberry Pi 3 with at least a 64GB Class 10 SD card.&lt;/p&gt;

&lt;p&gt;On the software side, the Rosie Repository relies on three primary software packages to do its work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://influxdata.com/time-series-platform/influxdb/&quot;&gt;InfluxDB&lt;/a&gt;, the primary database for the system&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://influxdata.com/time-series-platform/telegraf/&quot;&gt;Telegraf&lt;/a&gt;, which collects metrics about my repository and saves those to InfluxDB&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://influxdata.com/time-series-platform/telegraf/&quot;&gt;Grafana&lt;/a&gt;, which hosts realtime dashboards for home data hosted in InfluxDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The instructions below assume you’re installing this software on a Raspberry Pi 3 running Debian. If your hardware or OS is different, be sure to inspect the instructions below to note OS differences, which would likely manifest either in the package manager used or the platform architecture (ARM is assumed below).&lt;/p&gt;

&lt;h2 id=&quot;installing-influxdb&quot;&gt;Installing InfluxDB&lt;/h2&gt;

&lt;p&gt;One of the biggest challenges I had getting my repository up and running was getting InfluxDB and Telegraf installed on the system. I tried using the prepackaged binaries provided on the InfluxDB website, but 
these didn’t work for me, so I ended up building from source myself, which took a bit of doing. Hopefully these instructions will save you some time if you choose to do the same.&lt;/p&gt;

&lt;p&gt;You’ll need to start by updating some fo the default software.&lt;/p&gt;

&lt;h3 id=&quot;install-nodejs-and-npm&quot;&gt;Install Node.js and NPM&lt;/h3&gt;

&lt;p&gt;Raspbian already has node 0.10.29, but not npm. You can save yourself some headaches by 
grabbing a newer version of both.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start with fetching the latest package list from your manager.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install some essential build tools we need, then node and npm&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt-get install build-essential
 sudo apt-get install nodejs
 sudo apt-get install npm
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now create a symlink to your new version of node&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo ln -s /usr/bin/nodejs/usr/bin/node
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;install-go&quot;&gt;Install Go&lt;/h3&gt;

&lt;p&gt;To build InfluxDB (as well as Telegraf and Grafana) from source, you will need &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start by installing bison and the Go Version Manager (gvm)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt-get install bison
 wget https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer
 chmod +x gvm-installer
 ./gvm-installer
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Versions of Go installed will be saved to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gvm/scripts/gvm&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You’ll want Go 1.6, but due to a bug in the 1.6 installer, will need to install version 1.4.3 first.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; gvm install go1.4.3
 gvm use go1.4.3
 export GOROOT_BOOTSTRAP=$GOROOT
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you have 1.4.3, install Go 1.6.2&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; gvm install go1.6.2
 gvm use go1.6.2 --default
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;install-influxdb&quot;&gt;Install InfluxDB&lt;/h3&gt;

&lt;p&gt;Prerequisites done, it’s now time for the good stuff. Almost…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install a couple of additional dependencies before grabbing the Go source.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt-get install ruby-dev
 sudo gem install fpm
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download and build InfluxDB from source&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; go get github.com/influxdata/influxdb
 cd $GOPATH/src/github.com/influxdata/influxdb/
 ./build.py --package --version=0.13.0 --arch=armhf
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;arch&lt;/code&gt; flag to &lt;code class=&quot;highlighter-rouge&quot;&gt;armhf&lt;/code&gt; is critical for installing InfluxDB on ARM devices like the Pi.&lt;/p&gt;

&lt;p&gt;When you execute the Python build script, you might get a (non-fatal) error message. You can ignore this.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, install InfluxDB. Note that the exact name of your &lt;code class=&quot;highlighter-rouge&quot;&gt;deb&lt;/code&gt; package might differ from the one below. check the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory to get the exact name.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo dpkg -i build/influxdb_0.13.0~4254ad3_armhf.deb
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To see if things worked, run the &lt;code class=&quot;highlighter-rouge&quot;&gt;influxd&lt;/code&gt; command and then &lt;code class=&quot;highlighter-rouge&quot;&gt;influx&lt;/code&gt;. You should jump into the InfluxDB cli once the latter command is issued.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../img/post-images/influx.png&quot; alt=&quot;InfluxDB Running via a terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that InfluxDB is up, lets jump to Telegraf…&lt;/p&gt;

&lt;h2 id=&quot;installing-telegraf&quot;&gt;Installing Telegraf&lt;/h2&gt;

&lt;p&gt;Telegraf is a utility that can automatically capture and stream messages into InfluxDB (and other systems), which we’re using as the data storage system on the Repository.&lt;/p&gt;

&lt;p&gt;I’m running Telegraf on both my Gateway and Repository to collect server metrics (disk, diskio, memory, etc) about each system and stream them into InfluxDB. This allows me to monitor the brain of my smart home, and even include it in Node RED based workflows for managing my setup.&lt;/p&gt;

&lt;p&gt;As an ARM-based system, the installation process for Telegraf on the Pi is a bit different than other Debian-based systems.&lt;/p&gt;

&lt;p&gt;Assuming you installed InfluxDB first, you can jump right ahead to pulling the source down building it with Go. 
If you’ve not yet installed Go, walk through those instructions in the InfluxDB section first.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Grab the telegraf source&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; go get github.com/influxdata/telegraf
 cd $GOPATH/src/github.com/influxdata/telegraf
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; command and watch the magic happen&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That was easy right? No idea why Influx isn’t as simple, considering both are from the folks at InfluxData.&lt;/p&gt;

&lt;h2 id=&quot;installing-grafana&quot;&gt;Installing Grafana&lt;/h2&gt;

&lt;p&gt;Now that we have InfluxDB and Telegraf set-up, let’s get Grafana installed for some world-class dashboards!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start by making sure that you have Node 4 or later installed.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; wget https://nodejs.org/dist/v4.0.0/node-v4.0.0-linux-armv7l.tar.gz
 tar -xvf node-v4.0.0-linux-armv7l.tar.gz
 cd node-v4.0.0-linux-armv7l
 cp -R * /usr/local
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;As with before, if you’ve already installed InfluxDB and Telegraf, you should have Go and can grab the source. 
 If you’ve not yet installed Go, walk through those instructions in the InfluxDB section first.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grab the Grafana source&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; go get github.com/grafana/grafana
 cd $GOPATH/src/github.com/grafana/grafana
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the setup script&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; go run build.go setup
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grafana uses node and has a ton of dependencies. Let’s install those now:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo npm install node-gyp
 sudo npm install -f
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Make sure to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; flag to bypass issues with installing PhantomJS on ARM-based systems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Grunt&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo npm install -g grunt-cli
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To bypass an &lt;a href=&quot;https://github.com/grafana/grafana/issues/2683&quot;&gt;issue with PhantomJS&lt;/a&gt; (again), you’ll need to make a change to the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.go&lt;/code&gt; file&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo vi build.go
  
 Go to line 76 (`:76`) and modify the line to include a `force` flag

 grunt(&quot;--force&quot;, release);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the build script again. There will be warnings, but it should complete and place a &lt;code class=&quot;highlighter-rouge&quot;&gt;.deb&lt;/code&gt; file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;dist&lt;/code&gt; folder&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; go run build.go build pkg-deb
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now install the package. Note that the exact name of your Debian package might be different from mine:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo dpkg -i dist/grafana_4.0.0-1468683150pre1_armhf.deb
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open a browser and navigate to port &lt;code class=&quot;highlighter-rouge&quot;&gt;3000&lt;/code&gt; on your Pi and you should see the Garfana login screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../img/post-images/grafana.png&quot; alt=&quot;Grafana Login&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;auto-starting-services&quot;&gt;Auto-starting services&lt;/h2&gt;

&lt;p&gt;Once you’ve installed everything, you’ll no-doubt want to set up your services to auto-start on a reboot. 
This will save you time each time you power-cycle your devices. 
What’s more, having your services managed by &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd&lt;/code&gt; will allow you to restart and shut them down without jumping through hoops.&lt;/p&gt;

&lt;h3 id=&quot;auto-starting-influxdb&quot;&gt;Auto-starting InfluxDB&lt;/h3&gt;

&lt;p&gt;After you install InfluxDB, you should have a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;influxdb.service&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system&lt;/code&gt; folder on your Pi.&lt;/p&gt;

&lt;p&gt;If this file &lt;em&gt;does&lt;/em&gt; exist, you simply need to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt; settings on line 9 and 10 to the appropriate user and group (aka the user under which you installed InfluxDB).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If this file &lt;em&gt;doesn’t&lt;/em&gt; exist, you’ll need to create it:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cd /etc/systemd/system/
 touch influxdb.service
 vi influxdb.service
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then copy the service file from the &lt;a href=&quot;https://github.com/influxdata/influxdb/blob/master/scripts/influxdb.service&quot;&gt;InfluxDB repository here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt; settings on line 9 and 10 to the appropriate user and group (aka the user under which you installed InfluxDB).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now reload the systemd daemon and enable InfluxDB:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo systemctl daemon-reload
 sudo systemctl enable influxdb
 sudo systemctl start influxdb
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;auto-starting-telegraf&quot;&gt;Auto-starting Telegraf&lt;/h3&gt;

&lt;p&gt;Unlike InfluxDB, Telegraf didn’t put a &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; file in my &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system&lt;/code&gt; folder, so I added one myself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Crete the file&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cd /etc/systemd/system
 touch telegraf.service
 vi telegraf.service
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the service file from the &lt;a href=&quot;https://github.com/influxdata/telegraf/blob/master/scripts/telegraf.service&quot;&gt;Telegraf repository&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; setting on line 8 to the appropriate user.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Determine where telegraf is installed on your system and copy the result.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; which telegraf
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;For my installation, it was &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/pi/.gvm/pkgsets/go1.6.2/global/bin/telegraf&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Modify the path to the &lt;code class=&quot;highlighter-rouge&quot;&gt;telegraf&lt;/code&gt; command on line 11 to the correct location of your telegraf installer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;telegraf&lt;/code&gt; directory in &lt;code class=&quot;highlighter-rouge&quot;&gt;etc/default&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo touch /etc/default/telegraf
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reload the systemd daemon and enable InfluxDB&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo systemctl daemon-reload
 sudo systemctl enable telegraf
 sudo systemctl start telegraf
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;auto-starting-grafana&quot;&gt;Auto-starting Grafana&lt;/h3&gt;

&lt;p&gt;Auto-starting Grafana is the simpliest of all&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    sudo systemctl daemon-reload
    sudo systemctl enable grafana-server
    sudo sysatemctl start grafana-server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And you’re done. You Repository and Gateway are ready for you to use to automate your home! In a future post, I’ll help you get started with node-red, setup dashboards and more!&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Aug 2016 13:35:00 -0500</pubDate>
        <link>breakingthings.io/posts/smart-home-controller-part1</link>
        <guid isPermaLink="true">breakingthings.io/posts/smart-home-controller-part1</guid>
        
        <category>smart-home</category>
        
        <category>home-controller</category>
        
        <category>BYO</category>
        
        <category>particle</category>
        
        <category>software</category>
        
        <category>hardware</category>
        
        <category>samsung-artik</category>
        
        
        <category>smart-home</category>
        
      </item>
    
      <item>
        <title>My Journey to Making</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Let the beauty of what you love be what you do. - Rumi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have a confession to make.&lt;/p&gt;

&lt;p&gt;I’ve only been a self-described maker and tinkerer for about eighteen months. I’m “all in,” as they say, and I frankly cannot believe that I waited so long to get into this space.&lt;/p&gt;

&lt;p&gt;For almost two years now, I feel like I’ve been making up for lost time. From a simple &lt;a href=&quot;http://sparkfun.com&quot;&gt;SparkFun Inventor’s Kit&lt;/a&gt; that Sarah gave me for Christmas in 2014, I’ve gone on to acquire a veritable standalone maker-space full of microcontrollers, microcomputers, sensors, tools and gadgets, some to support things I’m actively working on, others “just in case” or for future endeavors. Sarah would probably tell you that I need to reign it in a bit.&lt;/p&gt;

&lt;p&gt;It hasn’t stopped with microcontrollers, either. In mid-2015, I purchased an &lt;a href=&quot;http://othermachine.co&quot;&gt;Othermill&lt;/a&gt;, an amazing Desktop CNC Mill that has been eating up nearly all of my free time. I’ve used it to create my own PCBs, engrave dog tags and luggage tags and create wax molds for Batman-shaped chocolates. Recently, I used the Othermill to create a fully-custom PCB for a home brewing project I’m working on. More on that one in a future post.&lt;/p&gt;

&lt;p&gt;For Christmas last year, I convinced Sarah that I &lt;em&gt;needed&lt;/em&gt; a 3D printer. In spite of her being slightly skeptical of my use of the term “need,” she relented and bought me a &lt;a href=&quot;http://lulzbot.com&quot;&gt;LulzBot Mini&lt;/a&gt;, which I’ve used to print dice, straw spoons for the boys, a Jenga case (because they used to come with the set, didn’t they?) and an enclosure for that home brewing PCB.&lt;/p&gt;

&lt;p&gt;I have a blue notebook on my desk, dedicated to making, that’s quickly filling up with  project ideas, dreams and half-cocked inspirations. I have more ideas than time and skill, but I’ll take that over the alternative, any day.&lt;/p&gt;

&lt;p&gt;Late start aside, I have found that I &lt;em&gt;love&lt;/em&gt; being a maker. I don’t have the EE background and deep understanding of electronics that many do, but I’m learning a lot and loving every minute of it.&lt;/p&gt;

&lt;p&gt;Over the last few months, I’ve reflected on my still-nascent journey and asked myself, “what took me so long” and “why now?”&lt;/p&gt;

&lt;p&gt;You, dear reader, no matter where you stand in relation to the maker movement, might wonder this yourself as you observe more and more people flocking to the world of making.&lt;/p&gt;

&lt;p&gt;Am I just following the crowd? Maybe, though that argument, in and of itself, is a specious one. “Crowds” by virtue of their size, have more power to convey value and generate excitement around new ideas than a silent minority—slogging away in dark basements—ever could. I find it hard to diminish someone for picking up a new skill, hobby or idea solely because the popular its of said skill lead to their discovery of it. It’s the crux of the hipster mentality to hate populist ideas; that is, except for the ones that are so mainstream to everyday life—like eating, sleeping, reproduction and cell phone usage—as to be unavoidable. I suppose it’s important to have principles.&lt;/p&gt;

&lt;p&gt;This is no tirade against hipsterism, so I digress.&lt;/p&gt;

&lt;p&gt;Am I here just to exploit new and emerging trends around “the IoT” and attempt to find a way to make a quick buck? Hardly. Like all other pursuits, the world of making, IoT, physical computing or whatever you want to call it is filled with its success stories and epic flops on the margins. Along the rest of the continuum are earnest people who tinker for fun, to keep themselves grounded, to teach others or in an attempt to build something that maybe enough people would desire them to create and sell. I won’t bother hiding the fact that I’m interested in moving my career into this space in any way I can, but the reasons have little to do with latching onto a trend on the upswing in an attempt to strike it rich.&lt;/p&gt;

&lt;p&gt;Instead, the reasons have everything to do with why I jumped into this movement in the first place.&lt;/p&gt;

&lt;p&gt;I desire to be a maker because I want my children to grow up as makers and tinkerers themselves.&lt;/p&gt;

&lt;p&gt;I have three boys, ages seven, five and two, and over the last two years, I’ve been amazed to see the desire to make and tinker come to naturally to my older two boys, Benjamin and Jack. From LEGO to electronics to paper, brads and cardboard boxes, I’ve watched my children create and use their imagination to create something out of nothing over and over again. When Sarah got that first SparkFun Inventor’s kit for me, I spent many evenings with Benjamin and Jack carefully placing LEDs, resistors and jumper wires into a breadboard and watching simple circuits come to life. They ask often to “build circuits” and we have a growing list of things we plan to create together.&lt;/p&gt;

&lt;p&gt;I love being a self-described maker, and I’ve no doubt that I’d pursue it no matter what. But to see my children light up alongside the LEDs they string together, and to see their imaginations run wild as we talk about robots and sensors and things we could build together, is a far greater reward than the  pursuit itself, and I’m so excited to be on this journey alongside them.&lt;/p&gt;

&lt;p&gt;I started this post months ago, and as I finally get around to finishing it, it seems fitting as the first entry for a new blog dedicated to this pursuit. The pursuit of breaking down the physical world in order to understand it, to teach others about it and to create new things for it.&lt;/p&gt;

&lt;p&gt;My journey is just beginning, and I have no idea where it will take me, my family and those around me, but I can’t wait to break some things and find out.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Aug 2016 13:35:00 -0500</pubDate>
        <link>breakingthings.io/posts/my-journey-to-making</link>
        <guid isPermaLink="true">breakingthings.io/posts/my-journey-to-making</guid>
        
        <category>tinkering</category>
        
        <category>making</category>
        
        <category>kids</category>
        
        <category>education</category>
        
        
        <category>making</category>
        
      </item>
    
  </channel>
</rss>
